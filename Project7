import socket
import threading

def handle_client(client_socket, address):
    print(f"Connected with {address}")

    while True:
        try:
            message = client_socket.recv(4096).decode()
            if not message:
                break

            print(f"Received from {address}: {message}")

            broadcast_message(message, client_socket)
        except:
            break

    print(f"Connection closed with {address}")
    client_socket.close()

def broadcast_message(message, sender_socket):
    for client in clients:
        if client != sender_socket:
            try:
                client.send(message.encode())
            except:
                continue

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(("127.0.0.1", 12345))
    server_socket.listen(5)

    print("Chat server started on 127.0.0.1:12345")

    while True:
        client_socket, address = server_socket.accept()
        clients.append(client_socket)

        client_thread = threading.Thread(target=handle_client, args=(client_socket, address))
        client_thread.start()

def start_client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(("127.0.0.1", 12345))

    print("Connected to the chat server. Type 'exit' to leave.")

    receive_thread = threading.Thread(target=receive_messages, args=(client_socket,))
    receive_thread.start()

    while True:
        message = input("Enter your message: ")
        client_socket.send(message.encode())

        if message.lower() == 'exit':
            break

    client_socket.close()

def receive_messages(client_socket):
    while True:
        try:
            message = client_socket.recv(4096).decode()
            if not message:
                break
            print(message)
        except:
            break

if __name__ == "__main__":
    clients = []

    server_thread = threading.Thread(target=start_server)
    server_thread.start()

    client_thread = threading.Thread(target=start_client)
    client_thread.start()

    server_thread.join()
    client_thread.join()
